on: 
  push: 
    branches:
       - dev
jobs:
  pre-push_hook:
 
     runs-on: ubuntu-latest
     
     steps:
     - name: Checkout
       uses: actions/checkout@v3
       with:
         ref: dev
     - name: Install Talisman
       run: |
           wget https://github.com/thoughtworks/talisman/releases/latest/download/talisman_linux_amd64 -O talisman
           chmod +x talisman
           sudo mv talisman /usr/local/bin/
 
     - name: Run Talisman Checks
       run: talisman --scan 
       continue-on-error: true
 
     - name: Upload Report
       uses: actions/upload-artifact@v3
       with:
           name: talisman-scan-report
           path: talisman_report/talisman_reports/data
  Build_and_test:
     needs: pre-push_hook
     runs-on: ubuntu-latest
     
     steps:
     - name: Checkout
       uses: actions/checkout@v3
       with:
         ref: dev
     - name: Set up JDK 17
       uses: actions/setup-java@v3
       with:
         java-version: '17'
         distribution: 'temurin'
         #cache: maven
     
         
     - name: Build Maven
       run: mvn -B package --file pom.xml
 
     - name: Unit Test
       run: mvn --batch-mode -Dmaven.test.failure.ignore=false test
       
     - name: Build Test Maven
       run: mvn -B package --file pom.xml -DskipTests
     
       
     - name: Upload to Artifact  
       run: mkdir staging && cp target/*jar-with-dependencies.jar staging
     - uses: actions/upload-artifact@v3
       with:
             name: Package
             path: staging
     #- name: Nexus Repo Publish
      # uses: sonatype-nexus-community/nexus-repo-github-action@master
       #with:
        # serverUrl: https://annually-quality-seagull.ngrok-free.app
         #username: admin
         #password: ${{ secrets.password }}
         #format: maven2
         #repository: maven-GH
         #coordinates: groupId=com.example artifactId=app version=1.0.0
         #assets: extension=jar
         #filename: target/*jar-with-dependencies.jar
 
     
    
     - name: Generate SBOM
       run: mvn org.cyclonedx:cyclonedx-maven-plugin:makeAggregateBom 
         
      
     - name: Upload SBOM report to artifact
       uses: actions/upload-artifact@v3
       with:
           name: sbom
           path: target/bom.xml
  
 
  Docker_push:
     needs: Build_and_test
     runs-on: ubuntu-latest
     
     steps:
     - name: Checkout
       uses: actions/checkout@v3
       with:
         ref: dev
     - name: Login to DockerHub
       uses: docker/login-action@v2
       with:
           username: ${{ secrets.DOCKER_USERNAME }}
           password: ${{ secrets.DOCKER_TOKEN }}
     - name: Build Container image
       run: docker build -t ${{ secrets.DOCKER_REPO }}:latest .
     - name: Publish Docker image
       run: docker push ${{ secrets.DOCKER_REPO }}
 
      
  Deploy:
    needs: Docker_push
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Start Minikube
        run: |
          minikube start
          minikube tunnel &
        continue-on-error: true

      - name: Set up kubectl
        uses: azure/k8s-set-context@v1
        with:
          kubeconfig: ${{ runner.workspace }}/kubeconfig.yaml

      - name: Start ngrok
        run: |
          ngrok http 80 &  # Expose port 80 to the internet
        continue-on-error: true

      - name: Get ngrok URL
        id: ngrok
        run: |
          sleep 5  # Wait for ngrok to start
          echo "::set-output name=url::$(curl -s http://localhost:4040/api/tunnels | jq -r .tunnels[0].public_url)"
        shell: bash

      - name: Install argocd CLI
        run: |
          curl -o /usr/local/bin/argocd -L https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
          chmod +x /usr/local/bin/argocd
        shell: bash

      - name: Install Ngrok
        run: |
          curl -o ngrok.zip https://bin.equinox.io/c/4VmDzA7iaHb/ngrok-stable-linux-amd64.zip
          unzip ngrok.zip
          chmod +x ngrok
          mv ngrok /usr/local/bin/
          ngrok --version
  
      
      - name: Start Ngrok
        run: |
          ngrok http 8080 &
          
      - name: Get ngrok URL
        id: ngro
        run: |
          sleep 5  # Wait for ngrok to start
          echo "::set-output name=url::$(curl -s http://localhost:4040/api/tunnels | jq -r .tunnels[0].public_url)"

      - name: Display ngrok URL
        run: |
          echo "ngrok URL: ${{ steps.ngro.outputs.url }}"
      
      - name: Connect to ArgoCD
        run: |
          # Remove "http://" or "https://" from ngrok URL
          NGROK_URL="${{ steps.ngro.outputs.url }}"
          NGROK_URL=${NGROK_URL#http://}
          NGROK_URL=${NGROK_URL#https://}

           # Specify the desired port for ArgoCD (e.g., 8080)
          ARGOCD_PORT=8080

            # Combine ngrok URL with the specified port
            ARGOCD_URL="${NGROK_URL}:$ARGOCD_PORT"
            argocd login $ARGOCD_URL --username $ARGOCD_USERNAME --password ${{ secrets.ARGOCD_PASSWORD }}
            shell: /usr/bin/bash -e {0}
        env:
          ARGOCD_USERNAME: admin  # Replace with your ArgoCD admin username
          needs: Get ngrok URL
      

      #- name: Log in to ArgoCD
        #run: |
          #argocd login $ARGOCD_SERVER --username $ARGOCD_USERNAME --password ${{ secrets.ARGOCD_PASSWORD }}
        #env:
          #ARGOCD_SERVER: localhost:8080  # Replace with your ArgoCD server URL
          #ARGOCD_USERNAME: admin  # Replace with your ArgoCD admin username

      - name: Update ArgoCD Application URL
        run: |
          kubectl apply -n argocd -f argo-cd.yaml
          argocd app set my-app-name -p targetRevision=<DEPLOYMENT_URL>
          argocd app sync my-app-name
        env:
          KUBECONFIG: ${{ runner.workspace }}/kubeconfig.yaml
          DEPLOYMENT_URL: ${{ steps.ngrok.outputs.url }}
  